#Project Class

--addTask(task: Task)--
    -throws an error when task is not instance of Task
    -throws an error when new task already exists
    -add new task to the list

--removeTask(id: string)--
    -throws an error when task with this id is not founded
    -remove task when id is valid
    -reset all dependancies with this task
    -do not delete task when it's removed

--validateTask(id: string)--
    -throws an error when task with this id is not founded
    -set listState
    -update startDate or status of dependencies

--getClosedTaskByDueDate(date, projectId)--
    -sort tasks normally
    -sort when task status is true

--getTaskByMember(id, projectId)--    
    -getTask by member

# Task
    -ne pas vérifier si la description, le title, startDate sont de type string, mais faire une conversion en string
    -lors de lé mise à jour d'une date, s'assurer que les dépendances enfant ou autre ont des dates convenables 

# Gestion des dépendances dans la class task
    -dates de début et de fin des tâches parent enfant
    -gestion de dépendancies FF, DD, FD en faisant appel à la set
    -faire un set pour aussi pour aussi la relation 
    -gérer les dépendances cycliques

# Gestion de la class Project
    -add task and remove task or project
    -validateTask
    -getClosedTasksByDueDate
    -getClosedTasksByMember
    -validateTask

# Simuler la class register